import os
import asyncio
import random
import logging
from aiohttp import web
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    WebAppInfo,
    BotCommand,
    BotCommandScopeDefault,
    BotCommandScopeAllGroupChats,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –¢–æ–∫–µ–Ω =====
TOKEN = os.getenv("BOT_TOKEN")

# ===== –ö–æ–º–∞–Ω–¥–∞ /dice =====
async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /dice")
    dice_buttons = [
        [InlineKeyboardButton("üé≤ d4", callback_data="roll_d4"),
         InlineKeyboardButton("üé≤ d6", callback_data="roll_d6")],
        [InlineKeyboardButton("üé≤ d8", callback_data="roll_d8"),
         InlineKeyboardButton("üé≤ d10", callback_data="roll_d10")],
        [InlineKeyboardButton("üé≤ d12", callback_data="roll_d12"),
         InlineKeyboardButton("üé≤ d20", callback_data="roll_d20")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫—É–±–∏–∫ –¥–ª—è –±—Ä–æ—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(dice_buttons)
    )

# ===== –ö–æ–º–∞–Ω–¥–∞ /date =====
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date")
    if update.effective_chat.type == "private":
        keyboard = [[
            InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                web_app=WebAppInfo(url="https://earthwormxd.github.io/game-calendar-iframe/")
            )
        ]]
    else:
        keyboard = [[
            InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)",
                url="https://earthwormxd.github.io/game-calendar-iframe/"
            )
        ]]
    await update.message.reply_text(
        "–í–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å üëá", reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫—É–±—ã =====
async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    try:
        dice_type = query.data.split("_")[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä: "d20"
        sides = int(dice_type)
        result = random.randint(1, sides)
        await query.edit_message_text(f"üé≤ –ë—Ä–æ—à–µ–Ω {dice_type} ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞.")

# ===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ =====
async def set_commands(app):
    commands = [
        BotCommand("dice", "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏"),
        BotCommand("date", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–µ—Å—Å–∏–π")
    ]
    await app.bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    await app.bot.set_my_commands(commands, scope=BotCommandScopeAllGroupChats())
    logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# ===== –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ =====
async def start_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    await set_commands(app)

    app.add_handler(CommandHandler("dice", dice))
    app.add_handler(CommandHandler("date", date))
    app.add_handler(CallbackQueryHandler(roll_dice, pattern="^roll_"))

    await app.initialize()
    await app.start()
    logger.info("ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω")

# ===== "–§–µ–π–∫–æ–≤—ã–π" –≤–µ–±-—Å–µ—Ä–≤–µ—Ä =====
async def start_web_server():
    async def handle(request):
        logger.info("Ping –æ—Ç Render")
        return web.Response(text="Bot is running!")

    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}")

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ =====
async def main():
    await asyncio.gather(
        start_bot(),
        start_web_server()
    )

if __name__ == "__main__":
    asyncio.run(main())
